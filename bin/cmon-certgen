#!/usr/bin/env node

var mod_dashdash = require('dashdash');
var mod_sshpk_agent = require('sshpk-agent');
var mod_sshpk = require('sshpk');
var mod_bunyan = require('bunyan');
var mod_vasync = require('vasync');
var mod_fs = require('fs');

var options = [
	{
		names: ['lifetime', 't'],
		type: 'positiveInteger',
		default: 3600,
		help: 'Set cert lifetime in seconds'
	},
	{
		names: ['help', 'h'],
		type: 'bool',
		help: 'Shows this help text'
	}
];
var parser = mod_dashdash.createParser({
	options: options
});
try {
	var cmdopts = parser.parse(process.argv);
} catch (e) {
	console.error('cmon-certgen: error: %s', e.message);
	process.exit(1);
}

if (cmdopts.help) {
	var help = parser.help({}).trimRight();
	console.error('cmon-certgen: generates cmon certs signed by a key '+
	    'in your ssh-agent\n');
	console.error(help);
	process.exit(1);
}


var log = mod_bunyan.createLogger({
	name: 'certgen'
});

var agent = new mod_sshpk_agent.Client();
var client;
var certSignKey;
var sslCert;
var sslKey = mod_sshpk.generatePrivateKey('ecdsa');

var keyId = process.env['SDC_KEY_ID'];
if (keyId === undefined)
	keyId = process.env['TRITON_KEY_ID'];
var keyFp = mod_sshpk.parseFingerprint(keyId);

var user = process.env['SDC_ACCOUNT'];
if (user === undefined)
	user = process.env['TRITON_ACCOUNT'];

mod_vasync.pipeline({
	funcs: [findSigningKey, signCert, writeFiles]
}, function (err) {
	if (err) {
		log.error(err, 'failed');
		process.exit(1);
		return;
	}
});

function findSigningKey(_, cb) {
	agent.listKeys(function (err, keys) {
		if (err) {
			cb(err);
			return;
		}

		certSignKey = keys.filter(function (k) {
			return (keyFp.matches(k));
		})[0];
		if (!certSignKey) {
			cb(new Error('Failed to find signing key which ' +
			    'matches "' + keyId + '"'));
			return;
		}
		cb();
	});
}

function signCert(_, cb) {
	var subj = mod_sshpk.identityFromDN('CN=' + user);
	var fp = certSignKey.fingerprint('md5').toString('base64');
	var issuer = mod_sshpk.identityFromDN('CN=' + fp);
	var opts = {
	    lifetime: cmdopts.lifetime,
	    purposes: ['signature', 'identity', 'clientAuth', 'joyentCmon']
	};
	agent.createCertificate(subj, sslKey, issuer, certSignKey,
	    opts, function (err, cert) {
		if (err) {
			cb(err);
			return;
		}
		sslCert = cert;
		cb();
	});
}

function writeFiles(_, cb) {
	mod_fs.writeFileSync('prom-key.pem', sslKey.toString('pem'));
	mod_fs.writeFileSync('prom-cert.pem', sslCert.toString('pem'));
	cb();
}

